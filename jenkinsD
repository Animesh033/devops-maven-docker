pipeline {
    agent any
    stages {
        stage('Sonar Scan Static Analysis') {
            steps {
                withSonarQubeEnv(credentialsId: 'sonacred', installationName: 'sonar') {
                    sh 'mvn clean package sonar:sonar -Dsonar.projectKey=test'
                }
            }
        }
        stage('Quality Gates') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Removal') {
            steps {
                sh 'docker rm -f mynewcontainer'
                sh 'docker rmi `docker images` || echo "Command 3 failed with exit code $?"'
            }
        }
        stage('Docker Build') {
            steps {
                sh 'docker build -t image-name:version .'
            }
        }
        stage('Security Scanning') {
            steps {
                sh 'trivy --no-progress --exit-code 1 --severity HIGH,CRITICAL image-name:version'
            }
        }
        stage('Deploy') {
            steps {
                sh 'docker run -d -p 8081:8080 --name mynewcontainer image-name:version'
            }
        }
        stage('OWASP ZAP Scan') {
            steps {
                sh 'docker run -v /var/lib/jenkins/workspace/p2:/zap/wrk -t owasp/zap2docker-stable zap-baseline.py -t http://54.91.54.68:8081/devops/ -g /tmp/zap/gen.conf -r /tmp/zap/report.html'
                
                script {
                    def zapReport = readFile('report.html')
                    if (zapReport.contains("0 alerts")) {
                        echo 'No vulnerabilities found in the OWASP ZAP scan.'
                    } else {
                        error('OWASP ZAP scan found vulnerabilities. Failing the pipeline.')
                    }
                }
            }
        }        
    }

    post {
        success {
            echo 'Pipeline completed successfully'
        }
        failure {
            echo 'Pipeline failed'
        }
    }
}
